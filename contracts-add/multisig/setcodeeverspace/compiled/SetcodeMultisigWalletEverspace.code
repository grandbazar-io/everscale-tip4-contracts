.version sol 0.47.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
TRUE
SETGLOB 6
;; end constructor protection
LDU 32
LDDICT
ROTREV
PAIR
SWAP
LDU 8
ENDS
;; param: owners
;; param: reqConfirms
; constructor SetcodeMultisigWalletEverspace
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 100
;; get member length
;; push identifier owners
PUSH S1
INDEX 0
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member length
	;; push identifier owners
	PUSH S1
	INDEX 0
	;; <=
	LESSINT 33
}
IF
THROWIFNOT 117
ACCEPT
;; push identifier owners
;; push identifier reqConfirms
DUP2
;; param: owners
;; param: reqConfirms
; function _initialize
PUSHINT 0
;; decl: ownerCount
; expValue
; end expValue
;; index
PUSHINT 0
;; push identifier owners
PUSH S3
INDEX 1
PUSHINT 32
DICTUGET
THROWIFNOT 50
PLDU 256
; colValue
SETGLOB 10
; end colValue
;; get member length
;; push identifier owners
PUSH S2
INDEX 0
;; decl: len
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	;; <
	;; push identifier len
	PUSH2 S0, S1
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier ownerCount
		PUSH S2
		LESSINT 32
	}
	IF
}
PUSHCONT {
	;; index
	;; push identifier i
	;; push identifier owners
	PUSH2 S0, S4
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	;; decl: key
	;; if
	;; !
	;; map.exists
	;; push identifier key
	DUP
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	DUP
	PUSHCONT {
		NIP
	}
	IF
	PUSHCONT {
		;; ++
		; expValue
		; end expValue
		PUSH2 S3, S3
		INC
		; colValue
		POP S5
		; end colValue
		; expValue
		;; fetch m_custodians
		;; push identifier key
		PUSH S1
		GETGLOB 13
		; end expValue
		ROT
		; colValue
		NEWC
		STU 8
		ROTREV
		PUSHINT 256
		DICTUSETB
		SETGLOB 13
		; end colValue
	}
	IFNOT
	;; end if
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
; end expValue
;; push identifier ownerCount
;; <=
;; push identifier reqConfirms
PUSH2 S1, S2
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier reqConfirms
	PUSH S2
}
IFELSE
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
;; <=
LESSINT 3
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
	;; *
	MULCONST 2
	;; +
	INC
	;; /
	PUSHINT 3
	DIV
}
IFELSE
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
; colValue
; end colValue
DROP
SETGLOB 14
; end function _initialize
; end constructor SetcodeMultisigWalletEverspace
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	tvm_ctos_internal
.type	tvm_ctos_internal, @function
CALL $tvm_ctos_internal_macro$

.macro tvm_ctos_internal_macro
;; param: cell
;; ret param: retParam@0
; function tvm_ctos
; end function tvm_ctos
DROP
PUSHINT 0

.globl	tvm_tree_cell_size_internal
.type	tvm_tree_cell_size_internal, @function
CALL $tvm_tree_cell_size_internal_macro$

.macro tvm_tree_cell_size_internal_macro
;; param: slice
;; ret param: retParam@0
PUSHINT 0
;; ret param: retParam@1
PUSHINT 0
; function tvm_tree_cell_size
; end function tvm_tree_cell_size
BLKDROP2 1, 2

.macro acceptTransfer
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: payload
; function acceptTransfer
;; get member value
DEPTH
ADDCONST -2
PICK
THROWIFNOT 100
;; push identifier payload
DUP
;; emit TransferAccepted
PUSHSLICE xc00000000000000000000000007d729cc8
NEWC
STSLICE
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function acceptTransfer
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendTransaction
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
CALLREF {
	CALL $sendTransaction_internal_macro$
}
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	sendTransaction_internal
.type	sendTransaction_internal, @function
CALL $sendTransaction_internal_macro$

.macro sendTransaction_internal_macro
;; param: dest
;; param: value
;; param: bounce
;; param: flags
;; param: payload
; function sendTransaction
;; push identifier m_custodianCount
GETGLOB 14
EQINT 1
THROWIFNOT 108
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier m_ownerKey
GETGLOB 10
EQUAL
THROWIFNOT 100
ACCEPT
;; transfer()
;; push identifier value
;; push identifier dest
;; push identifier bounce
PUSH3 S3, S4, S2
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
SWAP
STGRAMS
PUSHINT 1
STUR 107
;; push identifier payload
PUSH S1
STREFR
ENDC
;; push identifier flags
PUSH S2
SENDRAWMSG
; end function sendTransaction
BLKDROP 5

.macro submitTransaction
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
;; decode TvmCell
LDREF
ENDS
;; param: dest
;; param: value
;; param: bounce
;; param: allBalance
;; param: payload
CALLREF {
	CALL $submitTransaction_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000024c760b36_
	STSLICER
	STU 64
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	submitTransaction_internal
.type	submitTransaction_internal, @function
CALL $submitTransaction_internal_macro$

.macro submitTransaction_internal_macro
;; param: dest
;; param: value
;; param: bounce
;; param: allBalance
;; param: payload
;; ret param: transId
PUSHINT 0
; function submitTransaction
PUSHCONT {
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	;; decl: senderKey
	;; push identifier senderKey
	;; param: senderKey
	; function _findCustodian
	;; map.fetch
	;; push identifier senderKey
	BLKPUSH 2, 0
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	NULLSWAPIFNOT
	PUSHCONT {
		PLDU 8
	}
	IF
	;; decl: index
	;; push identifier index
	DUP
	ISNULL
	THROWIF 100
	;; return
	;; push identifier index
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	NIP
	; end function _findCustodian
	NIP
	;; decl: index
	;; push identifier value
	PUSH S6
	;; >=
	PUSHINT 1000000
	GEQ
	THROWIFNOT 107
	;; push identifier payload
	PUSH S3
	CALLREF {
		CALL $tvm_ctos_internal_macro$
	}
	CALLREF {
		CALL $tvm_tree_cell_size_internal_macro$
	}
	;; decl: bits
	;; decl: cells
	;; push identifier bits
	PUSH S1
	;; <
	PUSHINT 8192
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier cells
		DUP
		LESSINT 8
	}
	IF
	THROWIFNOT 121
	; function _removeExpiredTransactions
	PUSHCONT {
		; function _getExpirationBound
		;; return
		;; push identifier now
		NOW
		;; uint64
		;; -
		PUSHINT 3600
		SUB
		;; <<
		LSHIFT 32
		; end function _getExpirationBound
		;; decl: marker
		;; map.min
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUMINREF
		NULLSWAPIFNOT
		PUSHREFCONT {
			SWAP
			CTOS
			CALLREF {
				LDU 64
				LDU 32
				LDU 8
				LDU 8
				LDU 256
				LDU 8
				LDMSGADDR
				LDUQ 128
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDU 128
				}
				IFNOT
				LDUQ 16
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDU 16
				}
				IFNOT
				;; decode TvmCell
				DUP
				SBITREFS
				EQINT 1
				SWAP
				EQINT 0
				AND
				PUSHCONT {
					LDREF
					ENDS
					CTOS
				}
				IF
				LDREF
				LDIQ 1
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDI 1
				}
				IFNOT
				ENDS
				TUPLE 11
			}
			TUPLE 2
		}
		IF
		;; decl: minTxn
		;; push identifier minTxn
		DUP
		ISNULL
		THROWIF 102
		;; push identifier minTxn
		BLKPUSH 2, 0
		ISNULL
		THROWIF 63
		UNTUPLE 2
		;; decl: trId
		;; decl: txn
		;; push identifier trId
		;; <=
		;; push identifier marker
		PUSH2 S1, S3
		LEQ
		;; decl: needCleanup
		;; if
		;; !
		;; push identifier needCleanup
		DUP
		PUSHCONT {
			;; return
			BLKDROP 5
		}
		IFNOTJMP
		;; end if
		ACCEPT
		PUSHINT 0
		;; decl: i
		; while
		FALSE ; decl return flag
		PUSHCONT {
			DUP
			LESSINT 2
			DUP
			PUSHCONT {
				DROP
				;; push identifier needCleanup
				;; short-circuiting &&
				PUSH2 S2, S2
				PUSHCONT {
					DROP
					;; push identifier i
					PUSH S1
					LESSINT 40
				}
				IF
			}
			IF
		}
		PUSHCONT {
			;; ++
			; expValue
			PUSH S1
			; end expValue
			INC
			; colValue
			POP S2
			; end colValue
			;; push identifier m_requestsMask
			GETGLOB 11
			;; get member index
			;; push identifier txn
			PUSH S4
			INDEX 5
			;; param: mask
			;; param: index
			; function _decMaskValue
			;; return
			;; push identifier mask
			PUSH S1
			;; -
			PUSHINT 1
			;; <<
			PUSHINT 8
			;; *
			;; push identifier index
			PUSH S3
			;; uint256
			MUL
			LSHIFT
			SUB
			; end function _decMaskValue
			BLKDROP2 2, 1
			; expValue
			; end expValue
			; colValue
			SETGLOB 11
			; end colValue
			;; delete
			; expValue
			;; fetch m_transactions
			;; push identifier trId
			PUSH S4
			; end expValue
			; colValue
			GETGLOB 12
			PUSHINT 64
			DICTUDEL
			DROP
			SETGLOB 12
			; end colValue
			;; map.next
			;; push identifier trId
			PUSH S4
			;; push identifier m_transactions
			GETGLOB 12
			PUSHINT 64
			DICTUGETNEXT
			NULLSWAPIFNOT
			PUSHREFCONT {
				SWAP
				PLDREF
				CTOS
				CALLREF {
					LDU 64
					LDU 32
					LDU 8
					LDU 8
					LDU 256
					LDU 8
					LDMSGADDR
					LDUQ 128
					PUSHCONT {
						;; load next cell
						LDREF
						ENDS
						CTOS
						LDU 128
					}
					IFNOT
					LDUQ 16
					PUSHCONT {
						;; load next cell
						LDREF
						ENDS
						CTOS
						LDU 16
					}
					IFNOT
					;; decode TvmCell
					DUP
					SBITREFS
					EQINT 1
					SWAP
					EQINT 0
					AND
					PUSHCONT {
						LDREF
						ENDS
						CTOS
					}
					IF
					LDREF
					LDIQ 1
					PUSHCONT {
						;; load next cell
						LDREF
						ENDS
						CTOS
						LDI 1
					}
					IFNOT
					ENDS
					TUPLE 11
				}
				TUPLE 2
			}
			IF
			;; decl: nextTxn
			;; if
			;; !
			;; push identifier nextTxn
			DUP
			ISNULL
			PUSHCONT {
				;; break
				DROP2
				PUSHINT 2
			}
			IFJMP
			;; end if
			;; push identifier nextTxn
			BLKPUSH 2, 0
			ISNULL
			THROWIF 63
			UNTUPLE 2
			SWAP
			; expValue
			; end expValue
			; colValue
			POP S7
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP S5
			; end colValue
			; expValue
			; end expValue
			;; push identifier trId
			;; <=
			;; push identifier marker
			PUSH2 S5, S7
			LEQ
			; colValue
			POP S4
			; end colValue
			DROP
		}
		WHILE
		DROP
		; end while
		CALLREF {
			CALL $c7_to_c4$
		}
		COMMIT
		BLKDROP 6
	}
	CALLX
	; end function _removeExpiredTransactions
	;; push identifier m_requestsMask
	GETGLOB 11
	;; push identifier index
	;; param: mask
	;; param: index
	; function _getMaskValue
	;; return
	;; push identifier mask
	PUSH2 S3, S0
	;; >>
	PUSHINT 8
	;; *
	;; push identifier index
	PUSH S2
	;; uint256
	MULRSHIFT 
	;; &
	PUSHINT 255
	AND
	;; uint8
	UFITS 8
	; end function _getMaskValue
	BLKDROP2 2, 1
	LESSINT 5
	THROWIFNOT 113
	ACCEPT
	;; push identifier value
	;; push identifier allBalance
	PUSH2 S8, S6
	;; param: value
	;; param: allBalance
	; function _getSendFlags
	PUSHINT 2
	;; |
	PUSHINT 1
	OR
	;; decl: flags
	;; if
	;; push identifier allBalance
	PUSH S1
	PUSHCONT {
		; expValue
		; end expValue
		;; |
		; colValue
		DROP
		PUSHINT 2
		PUSHINT 128
		OR
		; end colValue
		;; get member balance
		GETPARAM 7
		INDEX 0
		;; uint128
		; expValue
		; end expValue
		; colValue
		POP S3
		; end colValue
	}
	IF
	;; end if
	;; return
	;; push identifier flags
	;; push identifier value
	PUSH2 S0, S2
	; end function _getSendFlags
	BLKDROP2 3, 2
	;; decl: flags
	;; decl: realValue
	;; push identifier m_defaultRequiredConfirmations
	GETGLOB 18
	;; decl: requiredSigns
	;; if
	;; push identifier requiredSigns
	DUP
	EQINT 1
	PUSHCONT {
		;; transfer()
		;; push identifier realValue
		;; push identifier dest
		;; push identifier bounce
		PUSH3 S1, S12, S10
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		SWAP
		STGRAMS
		PUSHINT 1
		STUR 107
		;; push identifier payload
		PUSH S9
		STREFR
		ENDC
		;; push identifier flags
		PUSH S3
		SENDRAWMSG
		;; return
		PUSHINT 0
		BLKDROP2 8, 1
	}
	PUSHCONT {
		;; push identifier m_requestsMask
		GETGLOB 11
		;; push identifier index
		;; param: mask
		;; param: index
		; function _incMaskValue
		;; return
		;; push identifier mask
		PUSH2 S6, S0
		;; +
		PUSHINT 1
		;; <<
		PUSHINT 8
		;; *
		;; push identifier index
		PUSH S3
		;; uint256
		MUL
		LSHIFT
		ADD
		; end function _incMaskValue
		BLKDROP2 2, 1
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		; function _generateId
		;; return
		;; push identifier now
		NOW
		;; uint64
		;; <<
		LSHIFT 32
		;; |
		;; get member timestamp
		LTIME
		;; &
		PUSHINT 4294967295
		AND
		OR
		; end function _generateId
		;; decl: trId
		;; push identifier trId
		DUP
		PUSHINT 0
		;; push identifier requiredSigns
		PUSH S3
		PUSHINT 0
		;; push identifier senderKey
		;; push identifier index
		BLKPUSH 2, 11
		;; push identifier dest
		PUSH S19
		;; push identifier realValue
		;; push identifier flags
		PUSH2 S9, S10
		;; push identifier payload
		PUSH S18
		;; push identifier bounce
		PUSH S21
		TUPLE 11
		;; decl: txn
		;; push identifier trId
		;; push identifier txn
		DUP2
		;; push identifier index
		;; param: transactionId
		;; param: txn
		;; param: custodianIndex
		; function _confirmTransaction
		;; if
		;; get member signsReceived
		;; push identifier txn
		PUSH2 S9, S0
		INDEX 3
		;; +
		INC
		;; >=
		;; get member signsRequired
		;; push identifier txn
		PUSH S2
		INDEX 2
		GEQ
		PUSHCONT {
			;; transfer()
			;; get member value
			;; push identifier txn
			PUSH S1
			INDEX 7
			;; get member dest
			;; push identifier txn
			PUSH S2
			INDEX 6
			;; get member bounce
			;; push identifier txn
			PUSH S3
			INDEX 10
			NEWC
			STSLICECONST x6_
			STI 1
			PUSHINT 3
			STZEROES
			STSLICE
			SWAP
			STGRAMS
			PUSHINT 1
			STUR 107
			;; get member payload
			;; push identifier txn
			PUSH S2
			INDEX 9
			STREFR
			ENDC
			;; get member sendFlags
			;; push identifier txn
			PUSH S2
			INDEX 8
			SENDRAWMSG
			;; push identifier m_requestsMask
			GETGLOB 11
			;; get member index
			;; push identifier txn
			PUSH S2
			INDEX 5
			;; param: mask
			;; param: index
			; function _decMaskValue
			;; return
			;; push identifier mask
			PUSH S1
			;; -
			PUSHINT 1
			;; <<
			PUSHINT 8
			;; *
			;; push identifier index
			PUSH S3
			;; uint256
			MUL
			LSHIFT
			SUB
			; end function _decMaskValue
			BLKDROP2 2, 1
			; expValue
			; end expValue
			; colValue
			SETGLOB 11
			; end colValue
			;; delete
			; expValue
			;; fetch m_transactions
			;; push identifier transactionId
			PUSH S2
			; end expValue
			; colValue
			GETGLOB 12
			PUSHINT 64
			DICTUDEL
			DROP
			SETGLOB 12
			; end colValue
		}
		PUSHCONT {
			;; get member confirmationsMask
			;; push identifier txn
			PUSH S1
			INDEX 1
			;; push identifier custodianIndex
			PUSH S1
			;; param: mask
			;; param: custodianIndex
			; function _setConfirmed
			PUSHINT 1
			;; uint32
			;; <<
			;; push identifier custodianIndex
			PUSH S1
			LSHIFT
			; expValue
			PUSH S2
			; end expValue
			OR
			; colValue
			POP S2
			; end colValue
			;; return
			;; push identifier mask
			PUSH S1
			; end function _setConfirmed
			BLKDROP2 2, 1
			; expValue
			PUSH S2
			; end expValue
			SWAP
			; colValue
			SETINDEX 1
			POP S2
			; end colValue
			;; ++
			; expValue
			PUSH2 S1, S1
			INDEX 3
			; end expValue
			INC
			; colValue
			SETINDEX 3
			POP S2
			; end colValue
			; expValue
			;; fetch m_transactions
			;; push identifier transactionId
			PUSH S2
			GETGLOB 12
			; end expValue
			;; push identifier txn
			PUSH S3
			; colValue
			CALLREF {
				UNTUPLE 11
				REVERSE 11, 0
				NEWC
				STU 64
				STU 32
				STU 8
				STU 8
				STU 256
				STU 8
				STSLICE
				BLKSWAP 4, 1
				NEWC
				STU 128
				STU 16
				STREF
				STI 1
				STBREFR
			}
			ENDC
			ROTREV
			PUSHINT 64
			DICTUSETREF
			SETGLOB 12
			; end colValue
		}
		IFELSE
		;; end if
		; end function _confirmTransaction
		BLKDROP 3
		;; return
		;; push identifier trId
		PUSH S1
		BLKDROP2 10, 1
	}
	CONDSEL
	JMPX
	;; end if
	BLKDROP 7
}
CALLX
; end function submitTransaction
BLKDROP2 5, 1

.macro confirmTransaction
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 64
ENDS
;; param: transactionId
CALLREF {
	CALL $confirmTransaction_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	confirmTransaction_internal
.type	confirmTransaction_internal, @function
CALL $confirmTransaction_internal_macro$

.macro confirmTransaction_internal_macro
;; param: transactionId
; function confirmTransaction
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
PUSHCONT {
	PLDU 8
}
IF
;; decl: index
;; push identifier index
DUP
ISNULL
THROWIF 100
;; return
;; push identifier index
BLKPUSH 2, 0
ISNULL
THROWIF 63
NIP
; end function _findCustodian
NIP
;; decl: index
; function _removeExpiredTransactions
PUSHCONT {
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	;; -
	PUSHINT 3600
	SUB
	;; <<
	LSHIFT 32
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUMINREF
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		CTOS
		CALLREF {
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDUQ 16
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 16
			}
			IFNOT
			;; decode TvmCell
			DUP
			SBITREFS
			EQINT 1
			SWAP
			EQINT 0
			AND
			PUSHCONT {
				LDREF
				ENDS
				CTOS
			}
			IF
			LDREF
			LDIQ 1
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDI 1
			}
			IFNOT
			ENDS
			TUPLE 11
		}
		TUPLE 2
	}
	IF
	;; decl: minTxn
	;; push identifier minTxn
	DUP
	ISNULL
	THROWIF 102
	;; push identifier minTxn
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: trId
	;; decl: txn
	;; push identifier trId
	;; <=
	;; push identifier marker
	PUSH2 S1, S3
	LEQ
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	PUSHCONT {
		;; return
		BLKDROP 5
	}
	IFNOTJMP
	;; end if
	ACCEPT
	PUSHINT 0
	;; decl: i
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			;; push identifier needCleanup
			;; short-circuiting &&
			PUSH2 S2, S2
			PUSHCONT {
				DROP
				;; push identifier i
				PUSH S1
				LESSINT 40
			}
			IF
		}
		IF
	}
	PUSHCONT {
		;; ++
		; expValue
		PUSH S1
		; end expValue
		INC
		; colValue
		POP S2
		; end colValue
		;; push identifier m_requestsMask
		GETGLOB 11
		;; get member index
		;; push identifier txn
		PUSH S4
		INDEX 5
		;; param: mask
		;; param: index
		; function _decMaskValue
		;; return
		;; push identifier mask
		PUSH S1
		;; -
		PUSHINT 1
		;; <<
		PUSHINT 8
		;; *
		;; push identifier index
		PUSH S3
		;; uint256
		MUL
		LSHIFT
		SUB
		; end function _decMaskValue
		BLKDROP2 2, 1
		; expValue
		; end expValue
		; colValue
		SETGLOB 11
		; end colValue
		;; delete
		; expValue
		;; fetch m_transactions
		;; push identifier trId
		PUSH S4
		; end expValue
		; colValue
		GETGLOB 12
		PUSHINT 64
		DICTUDEL
		DROP
		SETGLOB 12
		; end colValue
		;; map.next
		;; push identifier trId
		PUSH S4
		;; push identifier m_transactions
		GETGLOB 12
		PUSHINT 64
		DICTUGETNEXT
		NULLSWAPIFNOT
		PUSHREFCONT {
			SWAP
			PLDREF
			CTOS
			CALLREF {
				LDU 64
				LDU 32
				LDU 8
				LDU 8
				LDU 256
				LDU 8
				LDMSGADDR
				LDUQ 128
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDU 128
				}
				IFNOT
				LDUQ 16
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDU 16
				}
				IFNOT
				;; decode TvmCell
				DUP
				SBITREFS
				EQINT 1
				SWAP
				EQINT 0
				AND
				PUSHCONT {
					LDREF
					ENDS
					CTOS
				}
				IF
				LDREF
				LDIQ 1
				PUSHCONT {
					;; load next cell
					LDREF
					ENDS
					CTOS
					LDI 1
				}
				IFNOT
				ENDS
				TUPLE 11
			}
			TUPLE 2
		}
		IF
		;; decl: nextTxn
		;; if
		;; !
		;; push identifier nextTxn
		DUP
		ISNULL
		PUSHCONT {
			;; break
			DROP2
			PUSHINT 2
		}
		IFJMP
		;; end if
		;; push identifier nextTxn
		BLKPUSH 2, 0
		ISNULL
		THROWIF 63
		UNTUPLE 2
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S7
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		;; push identifier trId
		;; <=
		;; push identifier marker
		PUSH2 S5, S7
		LEQ
		; colValue
		POP S4
		; end colValue
		DROP
	}
	WHILE
	DROP
	; end while
	CALLREF {
		CALL $c7_to_c4$
	}
	COMMIT
	BLKDROP 6
}
CALLX
; end function _removeExpiredTransactions
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGETREF
NULLSWAPIFNOT
PUSHREFCONT {
	CTOS
	CALLREF {
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 16
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 16
		}
		IFNOT
		;; decode TvmCell
		DUP
		SBITREFS
		EQINT 1
		SWAP
		EQINT 0
		AND
		PUSHCONT {
			LDREF
			ENDS
			CTOS
		}
		IF
		LDREF
		LDIQ 1
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDI 1
		}
		IFNOT
		ENDS
		TUPLE 11
	}
}
IF
;; decl: optTxn
;; push identifier optTxn
DUP
ISNULL
THROWIF 102
;; push identifier optTxn
BLKPUSH 2, 0
ISNULL
THROWIF 63
;; decl: txn
;; !
;; get member confirmationsMask
;; push identifier txn
DUP
INDEX 1
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
;; push identifier custodianIndex
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
BLKPUSH 3, 1
;; &
PUSHINT 1
;; uint32
;; <<
;; push identifier index
PUSH S2
LSHIFT
AND
NEQINT 0
; end function _checkBit
; end function _isConfirmed
BLKDROP2 4, 1
THROWIF 103
ACCEPT
;; push identifier transactionId
;; push identifier txn
;; push identifier index
PUSH3 S3, S0, S2
;; param: transactionId
;; param: txn
;; param: custodianIndex
; function _confirmTransaction
;; if
;; get member signsReceived
;; push identifier txn
PUSH S1
INDEX 3
;; +
INC
;; >=
;; get member signsRequired
;; push identifier txn
PUSH S2
INDEX 2
GEQ
PUSHCONT {
	;; transfer()
	;; get member value
	;; push identifier txn
	PUSH S1
	INDEX 7
	;; get member dest
	;; push identifier txn
	PUSH S2
	INDEX 6
	;; get member bounce
	;; push identifier txn
	PUSH S3
	INDEX 10
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 1
	STUR 107
	;; get member payload
	;; push identifier txn
	PUSH S2
	INDEX 9
	STREFR
	ENDC
	;; get member sendFlags
	;; push identifier txn
	PUSH S2
	INDEX 8
	SENDRAWMSG
	;; push identifier m_requestsMask
	GETGLOB 11
	;; get member index
	;; push identifier txn
	PUSH S2
	INDEX 5
	;; param: mask
	;; param: index
	; function _decMaskValue
	;; return
	;; push identifier mask
	PUSH S1
	;; -
	PUSHINT 1
	;; <<
	PUSHINT 8
	;; *
	;; push identifier index
	PUSH S3
	;; uint256
	MUL
	LSHIFT
	SUB
	; end function _decMaskValue
	BLKDROP2 2, 1
	; expValue
	; end expValue
	; colValue
	SETGLOB 11
	; end colValue
	;; delete
	; expValue
	;; fetch m_transactions
	;; push identifier transactionId
	PUSH S2
	; end expValue
	; colValue
	GETGLOB 12
	PUSHINT 64
	DICTUDEL
	DROP
	SETGLOB 12
	; end colValue
}
PUSHCONT {
	;; get member confirmationsMask
	;; push identifier txn
	PUSH S1
	INDEX 1
	;; push identifier custodianIndex
	PUSH S1
	;; param: mask
	;; param: custodianIndex
	; function _setConfirmed
	PUSHINT 1
	;; uint32
	;; <<
	;; push identifier custodianIndex
	PUSH S1
	LSHIFT
	; expValue
	PUSH S2
	; end expValue
	OR
	; colValue
	POP S2
	; end colValue
	;; return
	;; push identifier mask
	PUSH S1
	; end function _setConfirmed
	BLKDROP2 2, 1
	; expValue
	PUSH S2
	; end expValue
	SWAP
	; colValue
	SETINDEX 1
	POP S2
	; end colValue
	;; ++
	; expValue
	PUSH2 S1, S1
	INDEX 3
	; end expValue
	INC
	; colValue
	SETINDEX 3
	POP S2
	; end colValue
	; expValue
	;; fetch m_transactions
	;; push identifier transactionId
	PUSH S2
	GETGLOB 12
	; end expValue
	;; push identifier txn
	PUSH S3
	; colValue
	CALLREF {
		UNTUPLE 11
		REVERSE 11, 0
		NEWC
		STU 64
		STU 32
		STU 8
		STU 8
		STU 256
		STU 8
		STSLICE
		BLKSWAP 4, 1
		NEWC
		STU 128
		STU 16
		STREF
		STI 1
		STBREFR
	}
	ENDC
	ROTREV
	PUSHINT 64
	DICTUSETREF
	SETGLOB 12
	; end colValue
}
IFELSE
;; end if
; end function _confirmTransaction
; end function confirmTransaction
BLKDROP 7

.macro isConfirmed
DROP
LDU 32
LDU 8
ENDS
;; param: mask
;; param: index
CALLREF {
	CALL $isConfirmed_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000027f81438e_
	STSLICER
	STI 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	isConfirmed_internal
.type	isConfirmed_internal, @function
CALL $isConfirmed_internal_macro$

.macro isConfirmed_internal_macro
;; param: mask
;; param: index
;; ret param: confirmed
PUSHINT 0
; function isConfirmed
;; push identifier mask
;; push identifier index
BLKPUSH 2, 2
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
;; push identifier custodianIndex
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
BLKPUSH 3, 1
;; &
PUSHINT 1
;; uint32
;; <<
;; push identifier index
PUSH S2
LSHIFT
AND
NEQINT 0
; end function _checkBit
; end function _isConfirmed
BLKDROP2 4, 1
; expValue
; end expValue
; colValue
NIP
; end colValue
; end function isConfirmed
BLKDROP2 2, 1

.macro getParameters
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getParameters_internal_macro$
}
;; emitting 6 value(s)
PUSH S6
PUSHCONT {
	PUSH S8
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 98
	STZEROES
	REVERSE 6, 1
	STSLICECONST xe6b8710c
	STU 8
	STU 8
	STU 64
	STU 128
	STU 8
	STU 8
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	BLKDROP 6
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getParameters_internal
.type	getParameters_internal, @function
CALL $getParameters_internal_macro$

.macro getParameters_internal_macro
;; ret param: maxQueuedTransactions
;; ret param: maxCustodianCount
;; ret param: expirationTime
;; ret param: minValue
;; ret param: requiredTxnConfirms
;; ret param: requiredUpdConfirms
; function getParameters
; expValue
; end expValue
; colValue
; end colValue
; expValue
; end expValue
; colValue
; end colValue
; expValue
; end expValue
; colValue
; end colValue
; expValue
; end expValue
; colValue
; end colValue
; expValue
; end expValue
;; push identifier m_defaultRequiredConfirmations
; colValue
; end colValue
; expValue
; end expValue
;; push identifier m_requiredVotes
; colValue
PUSHINT 5
PUSHINT 32
PUSHINT 3600
PUSHINT 1000000
GETGLOB 18
GETGLOB 17
; end colValue
; end function getParameters

.macro getTransaction
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 64
ENDS
;; param: transactionId
CALLREF {
	CALL $getTransaction_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	SWAP
	NEWC
	STSLICECONST x8ad9a08e
	SWAP
	UNTUPLE 11
	REVERSE 12, 0
	STU 64
	STU 32
	STU 8
	STU 8
	STU 256
	STU 8
	STSLICE
	BLKSWAP 4, 1
	NEWC
	STU 128
	STU 16
	STREF
	STI 1
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getTransaction_internal
.type	getTransaction_internal, @function
CALL $getTransaction_internal_macro$

.macro getTransaction_internal_macro
;; param: transactionId
;; ret param: trans
PUSHINT 0
BLKPUSH 5, 0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
PUSHINT 0
PUSHREF {
}
PUSHINT 0
TUPLE 11
; function getTransaction
;; map.fetch
;; push identifier transactionId
PUSH S1
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUGETREF
NULLSWAPIFNOT
PUSHREFCONT {
	CTOS
	CALLREF {
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 16
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 16
		}
		IFNOT
		;; decode TvmCell
		DUP
		SBITREFS
		EQINT 1
		SWAP
		EQINT 0
		AND
		PUSHCONT {
			LDREF
			ENDS
			CTOS
		}
		IF
		LDREF
		LDIQ 1
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDI 1
		}
		IFNOT
		ENDS
		TUPLE 11
	}
}
IF
;; decl: txn
;; push identifier txn
DUP
ISNULL
THROWIF 102
;; push identifier txn
BLKPUSH 2, 0
ISNULL
THROWIF 63
; expValue
; end expValue
; colValue
POP S2
; end colValue
DROP
; end function getTransaction
NIP

.macro getTransactions
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getTransactions_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003cc48bdca_
	STSLICER
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getTransactions_internal
.type	getTransactions_internal, @function
CALL $getTransactions_internal_macro$

.macro getTransactions_internal_macro
;; ret param: transactions
PUSHINT 0
NEWDICT
PAIR
; function getTransactions
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
;; -
PUSHINT 3600
SUB
;; <<
LSHIFT 32
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMINREF
NULLSWAPIFNOT
PUSHREFCONT {
	SWAP
	CTOS
	CALLREF {
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 16
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 16
		}
		IFNOT
		;; decode TvmCell
		DUP
		SBITREFS
		EQINT 1
		SWAP
		EQINT 0
		AND
		PUSHCONT {
			LDREF
			ENDS
			CTOS
		}
		IF
		LDREF
		LDIQ 1
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDI 1
		}
		IFNOT
		ENDS
		TUPLE 11
	}
	TUPLE 2
}
IF
;; decl: optTxn
; while
PUSHCONT {
	;; push identifier optTxn
	DUP
	ISNULL
	NOT
}
PUSHCONT {
	;; push identifier optTxn
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: id
	;; decl: txn
	;; if
	;; push identifier id
	;; >
	;; push identifier bound
	PUSH2 S1, S3
	GREATER
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier txn
		PUSH2 S4, S0
		;; array.push(..)
		CALLREF {
			UNTUPLE 11
			REVERSE 11, 0
			NEWC
			STU 64
			STU 32
			STU 8
			STU 8
			STU 256
			STU 8
			STSLICE
			BLKSWAP 4, 1
			NEWC
			STU 128
			STU 16
			STREF
			STI 1
			STBREFR
		}
		ENDC
		SWAP
		UNPAIR
		PUSH S1
		INC
		BLKSWAP 3, 1
		PUSHINT 32
		DICTUSETREF
		PAIR
		; colValue
		POP S5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier id
	PUSH S1
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		PLDREF
		CTOS
		CALLREF {
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDUQ 16
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 16
			}
			IFNOT
			;; decode TvmCell
			DUP
			SBITREFS
			EQINT 1
			SWAP
			EQINT 0
			AND
			PUSHCONT {
				LDREF
				ENDS
				CTOS
			}
			IF
			LDREF
			LDIQ 1
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDI 1
			}
			IFNOT
			ENDS
			TUPLE 11
		}
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
	DROP2
}
WHILE
; end while
DROP2
; end function getTransactions

.macro getTransactionIds
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getTransactionIds_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000342703436_
	STSLICER
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getTransactionIds_internal
.type	getTransactionIds_internal, @function
CALL $getTransactionIds_internal_macro$

.macro getTransactionIds_internal_macro
;; ret param: ids
PUSHINT 0
NEWDICT
PAIR
; function getTransactionIds
PUSHINT 0
;; decl: trId
;; map.min
;; push identifier m_transactions
GETGLOB 12
PUSHINT 64
DICTUMINREF
NULLSWAPIFNOT
PUSHREFCONT {
	SWAP
	CTOS
	CALLREF {
		LDU 64
		LDU 32
		LDU 8
		LDU 8
		LDU 256
		LDU 8
		LDMSGADDR
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 16
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 16
		}
		IFNOT
		;; decode TvmCell
		DUP
		SBITREFS
		EQINT 1
		SWAP
		EQINT 0
		AND
		PUSHCONT {
			LDREF
			ENDS
			CTOS
		}
		IF
		LDREF
		LDIQ 1
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDI 1
		}
		IFNOT
		ENDS
		TUPLE 11
	}
	TUPLE 2
}
IF
;; decl: optTxn
; while
PUSHCONT {
	;; push identifier optTxn
	DUP
	ISNULL
	NOT
}
PUSHCONT {
	;; push identifier optTxn
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	; expValue
	; end expValue
	; colValue
	; end colValue
	DROP
	POP S2
	; expValue
	; end expValue
	;; push identifier trId
	BLKPUSH 2, 2
	;; array.push(..)
	NEWC
	STU 64
	SWAP
	UNPAIR
	PUSH S1
	INC
	BLKSWAP 3, 1
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S3
	; end colValue
	;; map.next
	;; push identifier trId
	PUSH S1
	;; push identifier m_transactions
	GETGLOB 12
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		PLDREF
		CTOS
		CALLREF {
			LDU 64
			LDU 32
			LDU 8
			LDU 8
			LDU 256
			LDU 8
			LDMSGADDR
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDUQ 16
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 16
			}
			IFNOT
			;; decode TvmCell
			DUP
			SBITREFS
			EQINT 1
			SWAP
			EQINT 0
			AND
			PUSHCONT {
				LDREF
				ENDS
				CTOS
			}
			IF
			LDREF
			LDIQ 1
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDI 1
			}
			IFNOT
			ENDS
			TUPLE 11
		}
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
WHILE
; end while
DROP2
; end function getTransactionIds

.macro getCustodians
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getCustodians_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000036c036166_
	STSLICER
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getCustodians_internal
.type	getCustodians_internal, @function
CALL $getCustodians_internal_macro$

.macro getCustodians_internal_macro
;; ret param: custodians
PUSHINT 0
NEWDICT
PAIR
; function getCustodians
;; map.min
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUMIN
NULLSWAPIFNOT
PUSHCONT {
	SWAP
	PLDU 8
	TUPLE 2
}
IF
;; decl: optTxn
; while
PUSHCONT {
	;; push identifier optTxn
	DUP
	ISNULL
	NOT
}
PUSHCONT {
	;; push identifier optTxn
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: key
	;; decl: index
	; expValue
	; end expValue
	;; push identifier index
	;; push identifier key
	PUSH3 S3, S0, S1
	TUPLE 2
	;; array.push(..)
	CALLREF {
		UNTUPLE 2
		SWAP
		NEWC
		STU 8
		STU 256
	}
	SWAP
	UNPAIR
	PUSH S1
	INC
	BLKSWAP 3, 1
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S4
	; end colValue
	;; map.next
	;; push identifier key
	PUSH S1
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHCONT {
		SWAP
		PLDU 8
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
	DROP2
}
WHILE
; end while
DROP
; end function getCustodians

.macro submitUpdate
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
DUP
SDEMPTY
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
ENDS
;; param: codeHash
;; param: owners
;; param: reqConfirms
CALLREF {
	CALL $submitUpdate_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000028488ee8a_
	STSLICER
	STU 64
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	submitUpdate_internal
.type	submitUpdate_internal, @function
CALL $submitUpdate_internal_macro$

.macro submitUpdate_internal_macro
;; param: codeHash
;; param: owners
;; param: reqConfirms
;; ret param: updateId
PUSHINT 0
; function submitUpdate
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; decl: sender
;; push identifier sender
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
BLKPUSH 2, 0
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
PUSHCONT {
	PLDU 8
}
IF
;; decl: index
;; push identifier index
DUP
ISNULL
THROWIF 100
;; return
;; push identifier index
BLKPUSH 2, 0
ISNULL
THROWIF 63
NIP
; end function _findCustodian
NIP
;; decl: index
;; get member length
;; push identifier owners
PUSH S4
INDEX 0
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member length
	;; push identifier owners
	PUSH S4
	INDEX 0
	;; <=
	LESSINT 33
}
IF
THROWIFNOT 117
; function _removeExpiredUpdateRequests
PUSHCONT {
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	;; -
	PUSHINT 3600
	SUB
	;; <<
	LSHIFT 32
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	;; decl: optReq
	;; push identifier optReq
	DUP
	ISNULL
	THROWIF 102
	;; push identifier optReq
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: updateId
	;; decl: req
	;; push identifier updateId
	;; <=
	;; push identifier marker
	PUSH2 S1, S3
	LEQ
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	PUSHCONT {
		;; return
		BLKDROP 5
	}
	IFNOTJMP
	;; end if
	ACCEPT
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			;; push identifier needCleanup
			PUSH S1
		}
		IF
	}
	PUSHCONT {
		;; push identifier updateId
		;; get member index
		;; push identifier req
		OVER2
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		;; <<
		;; push identifier index
		PUSH S1
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		;; push identifier updateId
		; end expValue
		; colValue
		; end colValue
		; end function _deleteUpdateRequest
		DROP
		GETGLOB 15
		PUSHINT 64
		DICTUDEL
		DROP
		SETGLOB 15
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		NULLSWAPIFNOT
		PUSHREFCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			LDU 8
			ENDS
			TUPLE 8
			TUPLE 2
		}
		IF
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		;; if
		;; !
		;; push identifier optReq
		PUSH S4
		ISNULL
		PUSHCONT {
			;; break
			DROP
			PUSHINT 2
		}
		IFJMP
		;; end if
		;; push identifier optReq
		PUSH2 S4, S4
		ISNULL
		THROWIF 63
		UNTUPLE 2
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S3
		; end colValue
		; expValue
		; end expValue
		;; push identifier updateId
		;; <=
		;; push identifier marker
		PUSH2 S3, S5
		LEQ
		; colValue
		POP S2
		; end colValue
	}
	WHILE
	DROP
	; end while
	CALLREF {
		CALL $c7_to_c4$
	}
	COMMIT
	;; map.next
	;; push identifier updateId
	PUSH S2
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S4
	; end colValue
	BLKDROP 5
}
CALLX
; end function _removeExpiredUpdateRequests
;; !
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
;; param: mask
;; param: custodianIndex
; function _isSubmitted
;; return
;; push identifier mask
;; push identifier custodianIndex
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
BLKPUSH 4, 1
;; &
PUSHINT 1
;; uint32
;; <<
;; push identifier index
PUSH S2
LSHIFT
AND
NEQINT 0
; end function _checkBit
; end function _isSubmitted
BLKDROP2 4, 1
THROWIF 113
ACCEPT
;; push identifier m_updateRequestsMask
GETGLOB 16
;; push identifier index
;; param: mask
;; param: custodianIndex
; function _setSubmitted
;; return
;; push identifier mask
;; push identifier custodianIndex
BLKPUSH 3, 1
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
;; <<
;; push identifier custodianIndex
PUSH S1
LSHIFT
; expValue
PUSH S2
; end expValue
OR
; colValue
POP S2
; end colValue
;; return
;; push identifier mask
PUSH S1
; end function _setConfirmed
; end function _setSubmitted
BLKDROP2 4, 1
; expValue
; end expValue
; colValue
SETGLOB 16
; end colValue
; function _generateId
;; return
;; push identifier now
NOW
;; uint64
;; <<
LSHIFT 32
;; |
;; get member timestamp
LTIME
;; &
PUSHINT 4294967295
AND
OR
; end function _generateId
; expValue
; end expValue
; colValue
POP S3
; end colValue
;; push identifier updateId
;; push identifier index
PUSH2 S2, S0
PUSHINT 0
PUSHINT 0
;; push identifier sender
PUSH S5
;; push identifier codeHash
;; push identifier owners
;; push identifier reqConfirms
BLKPUSH 3, 10
TUPLE 8
; expValue
;; fetch m_updateRequests
;; push identifier updateId
PUSH S3
GETGLOB 15
; end expValue
ROT
; colValue
CALLREF {
	UNTUPLE 8
	REVERSE 8, 0
	NEWC
	STU 64
	STU 8
	STU 8
	STU 32
	STU 256
	STU 256
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	STU 8
}
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
;; push identifier updateId
PUSH S2
;; push identifier index
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; index
;; push identifier updateId
DUP2
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
PUSHREFCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 8
	ENDS
	TUPLE 8
}
PUSHREFCONT {
	PUSHINT 0
	BLKPUSH 6, 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
;; <<
;; push identifier custodianIndex
PUSH S1
LSHIFT
; expValue
PUSH S2
; end expValue
OR
; colValue
POP S2
; end colValue
;; return
;; push identifier mask
PUSH S1
; end function _setConfirmed
BLKDROP2 2, 1
; expValue
; end expValue
; colValue
SETINDEX 3
; end colValue
; expValue
;; fetch m_updateRequests
;; push identifier updateId
PUSH S2
GETGLOB 15
; end expValue
;; push identifier request
PUSH S2
; colValue
CALLREF {
	UNTUPLE 8
	REVERSE 8, 0
	NEWC
	STU 64
	STU 8
	STU 8
	STU 32
	STU 256
	STU 256
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	STU 8
}
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
; end function _confirmUpdate
BLKDROP 5
; end function submitUpdate
BLKDROP2 3, 1

.macro confirmUpdate
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 64
ENDS
;; param: updateId
CALLREF {
	CALL $confirmUpdate_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	confirmUpdate_internal
.type	confirmUpdate_internal, @function
CALL $confirmUpdate_internal_macro$

.macro confirmUpdate_internal_macro
;; param: updateId
; function confirmUpdate
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; param: senderKey
; function _findCustodian
;; map.fetch
;; push identifier senderKey
DUP
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
NULLSWAPIFNOT
PUSHCONT {
	PLDU 8
}
IF
;; decl: index
;; push identifier index
DUP
ISNULL
THROWIF 100
;; return
;; push identifier index
BLKPUSH 2, 0
ISNULL
THROWIF 63
NIP
; end function _findCustodian
NIP
;; decl: index
; function _removeExpiredUpdateRequests
PUSHCONT {
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	;; -
	PUSHINT 3600
	SUB
	;; <<
	LSHIFT 32
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	;; decl: optReq
	;; push identifier optReq
	DUP
	ISNULL
	THROWIF 102
	;; push identifier optReq
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: updateId
	;; decl: req
	;; push identifier updateId
	;; <=
	;; push identifier marker
	PUSH2 S1, S3
	LEQ
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	PUSHCONT {
		;; return
		BLKDROP 5
	}
	IFNOTJMP
	;; end if
	ACCEPT
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			;; push identifier needCleanup
			PUSH S1
		}
		IF
	}
	PUSHCONT {
		;; push identifier updateId
		;; get member index
		;; push identifier req
		OVER2
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		;; <<
		;; push identifier index
		PUSH S1
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		;; push identifier updateId
		; end expValue
		; colValue
		; end colValue
		; end function _deleteUpdateRequest
		DROP
		GETGLOB 15
		PUSHINT 64
		DICTUDEL
		DROP
		SETGLOB 15
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		NULLSWAPIFNOT
		PUSHREFCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			LDU 8
			ENDS
			TUPLE 8
			TUPLE 2
		}
		IF
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		;; if
		;; !
		;; push identifier optReq
		PUSH S4
		ISNULL
		PUSHCONT {
			;; break
			DROP
			PUSHINT 2
		}
		IFJMP
		;; end if
		;; push identifier optReq
		PUSH2 S4, S4
		ISNULL
		THROWIF 63
		UNTUPLE 2
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S3
		; end colValue
		; expValue
		; end expValue
		;; push identifier updateId
		;; <=
		;; push identifier marker
		PUSH2 S3, S5
		LEQ
		; colValue
		POP S2
		; end colValue
	}
	WHILE
	DROP
	; end while
	CALLREF {
		CALL $c7_to_c4$
	}
	COMMIT
	;; map.next
	;; push identifier updateId
	PUSH S2
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S4
	; end colValue
	BLKDROP 5
}
CALLX
; end function _removeExpiredUpdateRequests
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
NULLSWAPIFNOT
PUSHREFCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 8
	ENDS
	TUPLE 8
}
IF
;; decl: optRequest
;; push identifier optRequest
DUP
ISNULL
THROWIF 115
;; push identifier optRequest
BLKPUSH 2, 0
ISNULL
THROWIF 63
;; decl: request
;; !
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier index
PUSH S3
;; param: mask
;; param: custodianIndex
; function _isConfirmed
;; return
;; push identifier mask
;; push identifier custodianIndex
;; param: mask
;; param: index
; function _checkBit
;; return
;; push identifier mask
BLKPUSH 3, 1
;; &
PUSHINT 1
;; uint32
;; <<
;; push identifier index
PUSH S2
LSHIFT
AND
NEQINT 0
; end function _checkBit
; end function _isConfirmed
BLKDROP2 4, 1
THROWIF 116
ACCEPT
;; push identifier updateId
;; push identifier index
OVER2
;; param: updateId
;; param: custodianIndex
; function _confirmUpdate
;; index
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
PUSHREFCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 8
	ENDS
	TUPLE 8
}
PUSHREFCONT {
	PUSHINT 0
	BLKPUSH 6, 0
	NEWDICT
	PAIR
	PUSHINT 0
	TUPLE 8
}
IFELSE
;; decl: request
;; ++
; expValue
DUP
INDEX 2
; end expValue
INC
; colValue
SETINDEX 2
; end colValue
;; get member confirmationsMask
;; push identifier request
DUP
INDEX 3
;; push identifier custodianIndex
PUSH S2
;; param: mask
;; param: custodianIndex
; function _setConfirmed
PUSHINT 1
;; uint32
;; <<
;; push identifier custodianIndex
PUSH S1
LSHIFT
; expValue
PUSH S2
; end expValue
OR
; colValue
POP S2
; end colValue
;; return
;; push identifier mask
PUSH S1
; end function _setConfirmed
BLKDROP2 2, 1
; expValue
; end expValue
; colValue
SETINDEX 3
; end colValue
; expValue
;; fetch m_updateRequests
;; push identifier updateId
PUSH S2
GETGLOB 15
; end expValue
;; push identifier request
PUSH S2
; colValue
CALLREF {
	UNTUPLE 8
	REVERSE 8, 0
	NEWC
	STU 64
	STU 8
	STU 8
	STU 32
	STU 256
	STU 256
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	STU 8
}
ROTREV
PUSHINT 64
DICTUSETB
SETGLOB 15
; end colValue
; end function _confirmUpdate
; end function confirmUpdate
BLKDROP 7

.macro executeUpdate
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 64
;; decode TvmCell
LDREF
ENDS
;; param: updateId
;; param: code
CALLREF {
	CALL $executeUpdate_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	executeUpdate_internal
.type	executeUpdate_internal, @function
CALL $executeUpdate_internal_macro$

.macro executeUpdate_internal_macro
;; param: updateId
;; param: code
; function executeUpdate
;; map.exists
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; push identifier m_custodians
GETGLOB 13
PUSHINT 256
DICTUGET
DUP
PUSHCONT {
	NIP
}
IF
THROWIFNOT 100
; function _removeExpiredUpdateRequests
PUSHCONT {
	; function _getExpirationBound
	;; return
	;; push identifier now
	NOW
	;; uint64
	;; -
	PUSHINT 3600
	SUB
	;; <<
	LSHIFT 32
	; end function _getExpirationBound
	;; decl: marker
	;; map.min
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUMIN
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	;; decl: optReq
	;; push identifier optReq
	DUP
	ISNULL
	THROWIF 102
	;; push identifier optReq
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: updateId
	;; decl: req
	;; push identifier updateId
	;; <=
	;; push identifier marker
	PUSH2 S1, S3
	LEQ
	;; decl: needCleanup
	;; if
	;; !
	;; push identifier needCleanup
	DUP
	PUSHCONT {
		;; return
		BLKDROP 5
	}
	IFNOTJMP
	;; end if
	ACCEPT
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			;; push identifier needCleanup
			PUSH S1
		}
		IF
	}
	PUSHCONT {
		;; push identifier updateId
		;; get member index
		;; push identifier req
		OVER2
		INDEX 1
		;; param: updateId
		;; param: index
		; function _deleteUpdateRequest
		;; ~
		PUSHINT 1
		;; uint32
		;; <<
		;; push identifier index
		PUSH S1
		LSHIFT
		PUSHPOW2DEC 32
		SUBR
		; expValue
		;; fetch m_updateRequestsMask
		GETGLOB 16
		; end expValue
		AND
		; colValue
		SETGLOB 16
		; end colValue
		;; delete
		; expValue
		;; fetch m_updateRequests
		;; push identifier updateId
		; end expValue
		; colValue
		; end colValue
		; end function _deleteUpdateRequest
		DROP
		GETGLOB 15
		PUSHINT 64
		DICTUDEL
		DROP
		SETGLOB 15
		;; map.next
		;; push identifier updateId
		PUSH S3
		;; push identifier m_updateRequests
		GETGLOB 15
		PUSHINT 64
		DICTUGETNEXT
		NULLSWAPIFNOT
		PUSHREFCONT {
			SWAP
			LDU 64
			LDU 8
			LDU 8
			LDU 32
			LDU 256
			LDU 256
			LDU 32
			LDDICT
			ROTREV
			PAIR
			SWAP
			LDU 8
			ENDS
			TUPLE 8
			TUPLE 2
		}
		IF
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		;; if
		;; !
		;; push identifier optReq
		PUSH S4
		ISNULL
		PUSHCONT {
			;; break
			DROP
			PUSHINT 2
		}
		IFJMP
		;; end if
		;; push identifier optReq
		PUSH2 S4, S4
		ISNULL
		THROWIF 63
		UNTUPLE 2
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S3
		; end colValue
		; expValue
		; end expValue
		;; push identifier updateId
		;; <=
		;; push identifier marker
		PUSH2 S3, S5
		LEQ
		; colValue
		POP S2
		; end colValue
	}
	WHILE
	DROP
	; end while
	CALLREF {
		CALL $c7_to_c4$
	}
	COMMIT
	;; map.next
	;; push identifier updateId
	PUSH S2
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S4
	; end colValue
	BLKDROP 5
}
CALLX
; end function _removeExpiredUpdateRequests
;; map.fetch
;; push identifier updateId
PUSH S1
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUGET
NULLSWAPIFNOT
PUSHREFCONT {
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 8
	ENDS
	TUPLE 8
}
IF
;; decl: optRequest
;; push identifier optRequest
DUP
ISNULL
THROWIF 115
;; push identifier optRequest
BLKPUSH 2, 0
ISNULL
THROWIF 63
;; decl: request
;; push identifier code
PUSH S2
HASHCU
;; ==
;; get member codeHash
;; push identifier request
PUSH S1
INDEX 5
EQUAL
THROWIFNOT 119
;; get member signs
;; push identifier request
DUP
INDEX 2
;; >=
;; push identifier m_requiredVotes
GETGLOB 17
GEQ
THROWIFNOT 120
ACCEPT
;; push identifier updateId
;; get member index
;; push identifier request
PUSH2 S3, S0
INDEX 1
;; param: updateId
;; param: index
; function _deleteUpdateRequest
;; ~
PUSHINT 1
;; uint32
;; <<
;; push identifier index
PUSH S1
LSHIFT
PUSHPOW2DEC 32
SUBR
; expValue
;; fetch m_updateRequestsMask
GETGLOB 16
; end expValue
AND
; colValue
SETGLOB 16
; end colValue
;; delete
; expValue
;; fetch m_updateRequests
;; push identifier updateId
; end expValue
; colValue
; end colValue
; end function _deleteUpdateRequest
DROP
GETGLOB 15
PUSHINT 64
DICTUDEL
DROP
SETGLOB 15
;; push identifier code
PUSH S2
SETCODE
;; push identifier code
PUSH S2
CTOS
DUP
PUSHSLICE x8adb35
SDEQ
PUSHCONT {
	PLDREFIDX 1
	CTOS
}
IF
PLDREF
CTOS
BLESS
POP c3
;; get member custodians
;; push identifier request
DUP
INDEX 6
;; get member reqConfirms
;; push identifier request
PUSH S1
INDEX 7
CALLREF {
	CALL $:onCodeUpgrade$
}
; end function executeUpdate
BLKDROP 4

.macro getUpdateRequests
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getUpdateRequests_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000033c79dcfa_
	STSLICER
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getUpdateRequests_internal
.type	getUpdateRequests_internal, @function
CALL $getUpdateRequests_internal_macro$

.macro getUpdateRequests_internal_macro
;; ret param: updates
PUSHINT 0
NEWDICT
PAIR
; function getUpdateRequests
; function _getExpirationBound
;; return
;; push identifier now
NOW
;; uint64
;; -
PUSHINT 3600
SUB
;; <<
LSHIFT 32
; end function _getExpirationBound
;; decl: bound
;; map.min
;; push identifier m_updateRequests
GETGLOB 15
PUSHINT 64
DICTUMIN
NULLSWAPIFNOT
PUSHREFCONT {
	SWAP
	LDU 64
	LDU 8
	LDU 8
	LDU 32
	LDU 256
	LDU 256
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 8
	ENDS
	TUPLE 8
	TUPLE 2
}
IF
;; decl: optReq
; while
PUSHCONT {
	;; push identifier optReq
	DUP
	ISNULL
	NOT
}
PUSHCONT {
	;; push identifier optReq
	BLKPUSH 2, 0
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: updateId
	;; decl: req
	;; if
	;; push identifier updateId
	;; >
	;; push identifier bound
	PUSH2 S1, S3
	GREATER
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier req
		PUSH2 S4, S0
		;; array.push(..)
		CALLREF {
			UNTUPLE 8
			REVERSE 8, 0
			NEWC
			STU 64
			STU 8
			STU 8
			STU 32
			STU 256
			STU 256
			SWAP
			UNPAIR
			XCHG s2
			STU 32
			STDICT
			STU 8
		}
		SWAP
		UNPAIR
		PUSH S1
		INC
		BLKSWAP 3, 1
		PUSHINT 32
		DICTUSETB
		PAIR
		; colValue
		POP S5
		; end colValue
	}
	IF
	;; end if
	;; map.next
	;; push identifier updateId
	PUSH S1
	;; push identifier m_updateRequests
	GETGLOB 15
	PUSHINT 64
	DICTUGETNEXT
	NULLSWAPIFNOT
	PUSHREFCONT {
		SWAP
		LDU 64
		LDU 8
		LDU 8
		LDU 32
		LDU 256
		LDU 256
		LDU 32
		LDDICT
		ROTREV
		PAIR
		SWAP
		LDU 8
		ENDS
		TUPLE 8
		TUPLE 2
	}
	IF
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
	DROP2
}
WHILE
; end while
DROP2
; end function getUpdateRequests

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: newOwners
;; param: reqConfirms
; function onCodeUpgrade
;; set default state vars
PUSHINT 0
SETGLOB 10
PUSHINT 0
SETGLOB 11
NEWDICT
SETGLOB 12
NEWDICT
SETGLOB 13
PUSHINT 0
SETGLOB 14
NEWDICT
SETGLOB 15
PUSHINT 0
SETGLOB 16
PUSHINT 0
SETGLOB 17
PUSHINT 0
SETGLOB 18
;; end set default state vars
;; push identifier newOwners
;; push identifier reqConfirms
DUP2
;; param: owners
;; param: reqConfirms
; function _initialize
PUSHINT 0
;; decl: ownerCount
; expValue
; end expValue
;; index
PUSHINT 0
;; push identifier owners
PUSH S3
INDEX 1
PUSHINT 32
DICTUGET
THROWIFNOT 50
PLDU 256
; colValue
SETGLOB 10
; end colValue
;; get member length
;; push identifier owners
PUSH S2
INDEX 0
;; decl: len
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	;; <
	;; push identifier len
	PUSH2 S0, S1
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier ownerCount
		PUSH S2
		LESSINT 32
	}
	IF
}
PUSHCONT {
	;; index
	;; push identifier i
	;; push identifier owners
	PUSH2 S0, S4
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	PLDU 256
	;; decl: key
	;; if
	;; !
	;; map.exists
	;; push identifier key
	DUP
	;; push identifier m_custodians
	GETGLOB 13
	PUSHINT 256
	DICTUGET
	DUP
	PUSHCONT {
		NIP
	}
	IF
	PUSHCONT {
		;; ++
		; expValue
		; end expValue
		PUSH2 S3, S3
		INC
		; colValue
		POP S5
		; end colValue
		; expValue
		;; fetch m_custodians
		;; push identifier key
		PUSH S1
		GETGLOB 13
		; end expValue
		ROT
		; colValue
		NEWC
		STU 8
		ROTREV
		PUSHINT 256
		DICTUSETB
		SETGLOB 13
		; end colValue
	}
	IFNOT
	;; end if
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
; end expValue
;; push identifier ownerCount
;; <=
;; push identifier reqConfirms
PUSH2 S1, S2
LEQ
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier reqConfirms
	PUSH S2
}
IFELSE
; colValue
SETGLOB 18
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
PUSH S1
;; <=
LESSINT 3
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
}
PUSHCONT {
	;; push identifier ownerCount
	PUSH S1
	;; *
	MULCONST 2
	;; +
	INC
	;; /
	PUSHINT 3
	DIV
}
IFELSE
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
;; push identifier ownerCount
; colValue
; end colValue
DROP
SETGLOB 14
; end function _initialize
; end function onCodeUpgrade
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro fallback_macro
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; function fallback
; end function fallback
CALLREF {
	CALL $c7_to_c4$
}

.macro receive_macro
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; function receive
; end function receive
CALLREF {
	CALL $c7_to_c4$
}

.macro c7_to_c4
GETGLOB 18
GETGLOB 17
GETGLOB 16
GETGLOB 15
GETGLOB 14
GETGLOB 13
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STI 1
STU 256
STU 256
STDICT
STDICT
STU 8
STDICT
STU 32
STU 8
STU 8
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDI 1       ; pubkey [timestamp] constructor_flag memory
LDU 256
LDU 256
LDDICT
LDDICT
LDU 8
LDDICT
LDU 32
LDU 8
LDU 8
ENDS
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; pubkey
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHREFCONT {
	CALL $c4_to_c7$
}
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT   ; D
	; init m_ownerKey
	PUSHINT 0
	SETGLOB 10
	; init m_requestsMask
	PUSHINT 0
	SETGLOB 11
	; init m_transactions
	NEWDICT
	SETGLOB 12
	; init m_custodians
	NEWDICT
	SETGLOB 13
	; init m_custodianCount
	PUSHINT 0
	SETGLOB 14
	; init m_updateRequests
	NEWDICT
	SETGLOB 15
	; init m_updateRequestsMask
	PUSHINT 0
	SETGLOB 16
	; init m_requiredVotes
	PUSHINT 0
	SETGLOB 17
	; init m_defaultRequiredConfirmations
	PUSHINT 0
	SETGLOB 18
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro public_function_selector
DUP
PUSHINT 462553480
LEQ
IFJMPREF {
	DUP
	PUSHINT 182034574
	EQUAL
	IFJMPREF {
		CALL $getTransaction$
	}
	DUP
	PUSHINT 320701133
	EQUAL
	IFJMPREF {
		CALL $submitTransaction$
	}
	DUP
	PUSHINT 447168749
	EQUAL
	IFJMPREF {
		CALL $confirmTransaction$
	}
	DUP
	PUSHINT 462553480
	EQUAL
	IFJMPREF {
		CALL $confirmUpdate$
	}
}
DUP
PUSHINT 1327396670
LEQ
IFJMPREF {
	DUP
	PUSHINT 534794467
	EQUAL
	IFJMPREF {
		CALL $isConfirmed$
	}
	DUP
	PUSHINT 555891618
	EQUAL
	IFJMPREF {
		CALL $submitUpdate$
	}
	DUP
	PUSHINT 1290691692
	EQUAL
	IFJMPREF {
		CALL $sendTransaction$
	}
	DUP
	PUSHINT 1327396670
	EQUAL
	IFJMPREF {
		CALL $getUpdateRequests$
	}
}
DUP
PUSHINT 1723363596
LEQ
IFJMPREF {
	DUP
	PUSHINT 1352404237
	EQUAL
	IFJMPREF {
		CALL $getTransactionIds$
	}
	DUP
	PUSHINT 1516506356
	EQUAL
	IFJMPREF {
		CALL $acceptTransfer$
	}
	DUP
	PUSHINT 1526782041
	EQUAL
	IFJMPREF {
		CALL $getCustodians$
	}
	DUP
	PUSHINT 1723363596
	EQUAL
	IFJMPREF {
		CALL $getParameters$
	}
}
DUP
PUSHINT 1930571634
LEQ
IFJMPREF {
	DUP
	PUSHINT 1813932348
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 1840544855
	EQUAL
	IFJMPREF {
		CALL $executeUpdate$
	}
	DUP
	PUSHINT 1930571634
	EQUAL
	IFJMPREF {
		CALL $getTransactions$
	}
}
